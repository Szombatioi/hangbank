"use client";
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { createTheme, ThemeProvider } from "@mui/material/styles";
import { CircularProgress, CssBaseline } from "@mui/material";
import { LanguageProvider } from "./contexts/LanguageContext";
import { SnackbarProvider } from "./contexts/SnackbarProvider";
import { SessionProvider, useSession } from "next-auth/react";
import { usePathname, useRouter } from "next/navigation";
import { ReactNode, useEffect } from "react";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

const theme = createTheme({
  palette: {
    background: {
      default: "#fff0db",
      //   paper: "#1F0812"
    },
    // primary: {
    //   main: "#746D75", // default blue
    // },
    // secondary: {
    //   main: "#121619", // optional
    // },
  },
});

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable}`}
        style={{}}
      >
        <ThemeProvider theme={theme}>
          <SessionProvider>
            <AuthGuard>
              <CssBaseline />
              <LanguageProvider>
                <SnackbarProvider>{children}</SnackbarProvider>
              </LanguageProvider>
            </AuthGuard>
          </SessionProvider>
        </ThemeProvider>
      </body>
    </html>
  );
}

function AuthGuard({ children }: { children: ReactNode }) {
  const { data: session, status } = useSession();
  const router = useRouter();
  const pathname = usePathname();


  useEffect(() => {
    const isAuthPage = pathname.startsWith("/auth");
    if (status === "unauthenticated" && !isAuthPage) {
      router.push("/auth/login");
    }
  }, [status, router, pathname]);

  if (status === "loading")
    return (
      <div style={{ textAlign: "center" }}>
        <CircularProgress />
      </div>
    );

  return <>{children}</>;
}
